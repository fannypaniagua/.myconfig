" Detect OS
let os = substitute(system('uname'), "\n", "", "")
" if os == "Linux"
"    " Linux Stuff
" elseif os == "Darwin"
"    " Mac os Stuff
" endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use pathogen to manage plugins
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()

set nocompatible
set nonumber
set ruler
syntax on

" Timeout for multi-key mapping
set timeoutlen=200

" Don't let internal command output go to containing terminal
set shellpipe=&>

" Colors
set t_Co=256
let g:CSApprox_attr_map = { 'bold' : 'bold', 'italic' : '', 'sp' : '' }
colorscheme desertEx

" keep undo history across file saves
set undofile

" Read last 3 lines of files to look fom vim commands
set modeline
set modelines=3

" Set encoding
set encoding=utf-8

" Always show status bar
set laststatus=2

runtime macros/matchit.vim

" Do not update tags automatically (hangs on large projects)
let g:easytags_on_cursorhold=0
"let g:easytags_always_enabled=1

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Whitespace stuff
set nowrap
set tabstop=3
set shiftwidth=3
set softtabstop=3
set expandtab
set nolist "set list listchars=tab:\ \ ,trail:Â·

"Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

"No bells or flashes
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

"Fold using indentation, start with everything unfolded (up to level 100)
set foldmethod=indent
set foldlevel=100

" Be tolerant with newline characters for different platforms.
set fileformats=unix,mac,dos

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Command-t window size
let g:CommandTMaxHeight=20

" Refresh command-T automatically when files are saved
augroup CommandTExtension
   autocmd!
   autocmd FocusGained * CommandTFlush
   autocmd BufWritePost * CommandTFlush
augroup END

" Enable syntastic syntax checking
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

" Chenge cursor shape when switching modes: http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes
if os == "Darwin"
   if exists('$TMUX')
      let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
      let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
   else
      let &t_SI = "\<Esc>]50;CursorShape=1\x7"
      let &t_EI = "\<Esc>]50;CursorShape=0\x7"
   endif
elseif os == "Linux"
   if has("autocmd")
      au InsertEnter * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Profile0/cursor_shape ibeam"
      au InsertLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Profile0/cursor_shape block"
      au VimLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Profile0/cursor_shape ibeam"
      au VimEnter * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Profile0/cursor_shape block"
   endif
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" Use jk instead of <esc>
" vnoremap df <esc>
" vnoremap fd <esc>
" vnoremap <esc> <nop>
" cnoremap df <esc>
" cnoremap fd <esc>
" cnoremap <esc> <nop>
" inoremap df <esc>
" inoremap fd <esc>
" inoremap <esc> <nop>

" Yanking also copies to system clipboard
vnoremap y ygv"+y
nnoremap yy Vy

" Deleting also copies to system clipboard
vnoremap d "+ygvd
nnoremap dd "+yydd

" Use comma as the leader key
let mapleader=","

" Leader F for Ack
map <Leader>f :Ack<space>-ai<space>

" Update and show tag list
map <Leader>rt :UpdateTags *<CR>
map <Leader>st :TagbarToggle<CR>

" Jump to companion file (*.cpp to *.hpp and so on)
map <Leader>Up :FSHere<CR>

" Open markup previews in chromium
let g:HammerBrowser = 'google-chrome'

" Leader z for undo history
map <Leader>z :GundoToggle<CR>

" Nerd tree 
map <Leader>n :NERDTreeToggle<CR>

" w!! writes a file as sudo
cmap w!! w !sudo tee >/dev/null %

" Ctrl+v is normally visual block mode, change to Leader+v
noremap <Leader>v <C-v>

" Resize windows
map ) <C-W>>
map ( <C-W><
map + <C-W>+
map _ <C-W>-

" Switch Windows
map <Leader>h <C-w>h
map <Leader>j <C-w>j
map <Leader>k <C-w>k
map <Leader>l <C-w>l

" <Leader>+/ toggles comments:
map <Leader>/ :TComment<cr> 
imap <Leader>/ <c-o>:TComment<cr>
vmap <Leader>/ :TCommentMaybeInline<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Filetypes
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

" add arduino syntax highlight
au BufNewFile,BufRead *.pde set ft=arduino

" add RDF syntax highlight for ttl files (used when developing lv2 plugins)
au BufNewFile,BufRead *.ttl set ft=n3

"Use html and js snippets in php files: Commenting out, it messes up ack. :S
" au BufRead *.php set ft=php.html.javascript
" au BufNewFile *.php set ft=php.html.javascript

" Enable cakephp snippets
au FileType php set ft=php.cakephp

" Enable faust syntax for dsp files
au BufNewFile,BufRead *.dsp set filetype=faust

" markdown files need 4 spaces for indent size
autocmd BufRead,BufNewFile *.markdown,*.md setlocal sw=4 sts=4 et

" coffee files need 2 spaces for indent size
autocmd BufRead,BufNewFile *.coffee setlocal sw=2 sts=2 et









""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" functions, etc. 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Put a colon at the end of the line
nmap ;; A;<esc>
imap ;; <esc>A;<esc>

" Put a comma at the end of the line
nmap ,, A,<esc>
imap ,, <esc>A,<esc>

" Expand {<CR> 
" DelimitMate is supposed to do this but it's not working. Mapping manually:
" let delimitMate_expand_cr = 1
imap {<CR> {<CR>}<esc>O
imap (<CR> (<CR>)<esc>O
imap [<CR> [<CR>]<esc>O

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Split into 4 windows
function! SplitFour()
   vsplit
   split
   execute "normal \<c-w>l"
   split
   execute "normal \<c-w>h"
endfunction
command! S4 call SplitFour()
cmap s4 S4<CR>

" Creates a banner with comments
autocmd FileType vim map <Leader>b I"<Del>  <esc>A  "<Del><esc>yyp0lv$hhr=yykPjj
autocmd FileType javascript,php,c,cpp map <Leader>b I//  <esc>A  //<esc>yyp0llv$hhhr=yykPjj
autocmd FileType python,ruby,sh,zsh map <Leader>b I#  <esc>A  #<esc>yyp0lv$hhr=yykPjj
autocmd FileType css map <Leader>b I/*  <esc>A  */<esc>yyp0llv$r=$hc$*/<esc>yykPjj

" Generates Wordpress-friendly html from a markdown file
" TODO: Fix this, take a look at Hammer plugin, might be useful
function! Markdown2wp()
   !markdown % > /tmp/wp.html
   tabedit /tmp/wp.html
   %s@<pre><code>@[cc lang="c" escaped="true"]@g
   %s@</code></pre>@[/cc]@eg
   "silent s/\t/\&#9;/eg
endfunction

" Runs several lines in a terminal
function! RunCommands()
   echo system(getline('.'))
endfunction
command -range RunCommands <line1>,<line2>call RunCommands()
vmap <Leader>r :RunCommands<CR>

" Ctrl+Shift+h makes json files pretty
" au FileType json map <C-S-h> :%!json_xs -f json -t json-pretty<CR>

" XML prettify
" function! DoPrettyXML()
"   " save the filetype so we can restore it later
"   let l:origft = &ft
"   set ft= 
"   " delete the xml header if it exists. This will
"   " permit us to surround the document with fake tags
"   " without creating invalid xml.
"   1s/<?xml .*?>//e
"   " insert fake tags around the entire document.
"   " This will permit us to pretty-format excerpts of
"   " XML that may contain multiple top-level elements.
"   0put ='<PrettyXML>'
"   $put ='</PrettyXML>'
"   silent %!xmllint --format -
"   " xmllint will insert an <?xml?> header. it's easy enough to delete
"   " if you don't want it.
"   " delete the fake tags
"   2d
"   $d
"   " restore the 'normal' indentation, which is one extra level
"   " too deep due to the extra tags we wrapped around the document.
"   silent %<
"   " back to home
"   1
"   " restore the filetype
"   exe "set ft=" . l:origft
" endfunction
" command! PrettyXML call DoPrettyXML()
" 
" " Ctrl+Shift+h Makes xml files pretty.
" au FileType xml map <C-S-h> :PrettyXML<CR>

